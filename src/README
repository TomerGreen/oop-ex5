tomerg
am_204713721


=============================
=      File description     =
=============================

    Package Description:
        FilesProcessing - Contains the logic of the actual program
        Filters - Contains all filter types.
        Orders - Contains all order type.

    Filter Package -
        FilterFactory.java -  A factory class for creating the right kind of filter.
        Filter.java - An abstract class that implements a filter.
        BooleanFilter.java - Implements file filters that accept files based on a boolean property.
        AllFilter.java - Implements a filter that accepts every file.
        ExecutableFilter.java - Implements a filter that accepts executable files.
        HiddenFilter.java -  Implements a filter that only accepts hidden files.
        NameContainFilter.java - A filter that accepts files whose name contains the given value.
        NameFilter.java - An abstract class that represents filters that accept files based on a string.
        NamelsFilter.java - Accepts files granted their name is the given search string.
        NegatedFilter.java - A decorator class that implements a negated filter
        PrefixlsFilter.java - A filter that accepts files iff their name starts with a given string.
        SizeBetweenFilter.java - Implements a filter that accepts files whose size is between given values.
        SizeFilter.java - Implements filters that accepts files based on their size.
        SizeGreaterThanFilter.java - Implements a filter that accepts files strictly over a given size limit.
        SizeSmallerThanFilter.java - A filter that accepts files that are strictly smaller than a given size.
        SuffixlsFilter.java -  A filter that accepts files whose name ends with a given string.
        WritableFilter.java - Implements a filter that only accepts writable files.

    Orders Package -
        Order.java - An abstract class represents an order in which the files should be printed.
        OrderFactory.java - A factory class for creating the right kind of orders
        AbsOrder.java - A subclass that compare between files based on the ABC orders of their AbsolutePath.
        ReverseOrder.java - A subclass that compare between files based on the opposite of the determined
                            orders.
        SizeOrder.java - A subclass that compare between files based on their file size.
        TypeOrder.java -  A subclass that compare between files based on their file type

    FilesProcessing Package -
       CommandParser.java- Parses a command file into a list of section objects.
       DirectoryProcessor.java - Processes files in a source directory according to a command file.
       Section.java - Implements a command section, containing a filter and an order clause.
       Type1ErrorException.java - An abstract superclass for all type II exceptions.
       Type2ErrorException.java - An abstract superclass for all type II exceptions.

=============================
=          Design           =
=============================

*  The Filter and Order classes and subclasses are in separate packages that share a path with the
filesprocessing package. This is so that a user can import only these packages for a different file processing
program.

*  We decided to implement the two exception classes as abstract class, and create several nested classes for
specific exceptions. This is so we can throw specific exceptions when needed, but still mask them under
general categories for the calling function. We preferred to implement the most specific exceptions as nested
classes so they will only be thrown in the proper context. This makes sure the caller knows which process
caused each exception to be thrown.

*  The Negated filter and Reverse order are implemented by a decorator class that takes a Filter or Order as
an input and returns an object that matches a file iff it is not matched by it, or returns the opposite of the
 comparison of the original order command.

*  We used constructors for abstract filter classes in order to initialize fields shared by several filter
   classes.

=============================
=  Implementation details   =
=============================

*  Since we need to first check for Type II errors, and only then print all Type I errors, the parser class holds
a warning linked list which we add a message to every time an exception is thrown.

*  We decided to have CommandProcessor, which holds all the section objects parsed from the command file,
implement the java.io.FileFilter interface. This way, it can be passed to the fileList function which will return
only the files that pass all the filters.

